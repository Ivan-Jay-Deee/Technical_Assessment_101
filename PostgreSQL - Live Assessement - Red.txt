------------------------------------------------------------------------------------
PostgreSQL - Live Assessement - Redemption P1
------------------------------------------------------------------------------------

Task: ADD RELATIONSHIPS BETWEEN TABLES
	- Sales -> Customers
	- SaleDetails -> Products
	- SaleDetails -> Sales


A. Sales -> Customers

ALTER TABLE "tb_Sales"
	ADD CONSTRAINT fk_sales_customer
	FOREIGN KEY (sale_customer_id)
	REFERENCES "tb_Customers"(customer_id);


B. SaleDetails -> Products

- SET product_id AS PRIMARY KEY

ALTER TABLE "tb_Products"
ADD PRIMARY KEY (product_id);

- ADD RELATIONSHIP

ALTER TABLE "tb_SaleDetails"
	ADD CONSTRAINT fk_saledetail_product
	FOREIGN KEY (sale_detail_product_id)
	REFERENCES "tb_Products"(product_id);


C. SaleDetails -> Sales

ALTER TABLE "tb_SaleDetails"
	ADD CONSTRAINT fk_saledetails_sales
	FOREIGN KEY (sale_detail_sale_id)
	REFERENCES "tb_Sales"(sale_id);

------------------------------------------------------------------------------------
PostgreSQL - Live Assessement - Redemption P2
------------------------------------------------------------------------------------

Task 1: Basic Queries
	Retrive the names and email addresses of all customers

	SELECT customer_full_name, customer_email
	FROM "tb_Customers";


Task 2: Join and Aggregate
	Retrieve a list of customers along with the total amount they have spent on orders
	
	SELECT customer_id, customer_full_name, SUM(sale_detail_quantity * product_price) AS total_amount
	FROM "tb_Customers"
	INNER JOIN "tb_Sales" ON "tb_Customers".customer_id = "tb_Sales".sale_customer_id
	INNER JOIN "tb_SaleDetails" ON "tb_Sales".sale_id = "tb_SaleDetails".sale_detail_sale_id
	INNER JOIN "tb_Products" ON "tb_SaleDetails".sale_detail_id = "tb_Products".product_id
	GROUP BY customer_id;


Task 3: Filtering and Ordering
	Retrieve the top 5 products ordered by quantity
	
	SELECT sale_detail_product_id, SUM(sale_detail_quantity) AS order_quantity
	FROM "tb_SaleDetails"
	GROUP BY sale_detail_product_id
	LIMIT 5


Task 4: Sub-queries
	Find the customer who made the highest single purchase (based on total order amount)
	
	SELECT customer_id, customer_full_name, SUM(sale_detail_quantity * product_price) AS total_amount
	FROM "tb_Customers"
	INNER JOIN "tb_Sales" ON "tb_Customers".customer_id = "tb_Sales".sale_customer_id
	INNER JOIN "tb_SaleDetails" ON "tb_Sales".sale_id = "tb_SaleDetails".sale_detail_sale_id
	INNER JOIN "tb_Products" ON "tb_SaleDetails".sale_detail_id = "tb_Products".product_id
	GROUP BY customer_id
	ORDER BY total_amount DESC
	LIMIT 1


Task 5: Update and Insert
	Insert a new customer record

- INSERT NEW RECORD

	INSERT INTO "tb_Customers" (customer_id, customer_full_name, customer_email, customer_phone)
	VALUES (1, 'Ivan Jay De Asis', 'ivanjaydeassis@gmail.com', '09123456789')

- UPDATE RECORD
	UPDATE "tb_Customers"
	SET customer_phone = '09987654321'
	WHERE customer_id = 1;
